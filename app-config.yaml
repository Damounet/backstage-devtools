app:
  title: ASD Backstage Developer Portal
  baseUrl: http://localhost:3000

organization:
  name: Inetum ASD

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'http:', 'https:', 'data:']
    frame-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  gitlab:
    - host: ${GITLAB_URL}
      apiBaseUrl: https://${GITLAB_URL}/api/v4
      token: ${GITLAB_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true
  endpoints:
    '/nexus-repository-manager':
      target: ${NEXUS_URL}
      headers:
        X-Requested-With: XMLHttpRequest
        # Uncomment the following line to access a private Nexus Repository Manager using a token
        Authorization: Basic ${NEXUS_TOKEN}
      changeOrigin: true
      # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
      secure: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  sanitizer:
    allowedIframeHosts:
      - www.youtube.com
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local' / default: docker
    mkdocs:
      defaultPlugins:
        - techdocs-core
        - kroki
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# https://backstage.io/docs/auth/#sign-in-configuration
enableExperimentalRedirectFlow: true
auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    gitlab:
      development:
        clientId: ${GITLAB_AUTH_CLIENT_ID}
        clientSecret: ${GITLAB_AUTH_CLIENT_SECRET}
        audience: https://${GITLAB_URL}
        signIn:
          resolvers:
#            - resolver: usernameMatchingUserEntityName

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

  providers:
    gitlab:
      codeP:
        host: ${GITLAB_URL} # Identifies one of the hosts set up in the integrations
        # branch: main # Optional. Used to discover on a specific branch
        # fallbackBranch: main # Optional. Fallback to be used if there is no default branch configured at the Gitlab repository. It is only used, if `branch` is undefined. Uses `master` as default
        skipForkedRepos: false # Optional. If the project is a fork, skip repository
        # group: example-group # Optional. Group and subgroup (if needed) to look for repositories. If not present the whole instance will be scanned
        entityFilename: catalog-info.yaml # Optional. Defaults to `catalog-info.yaml`
        projectPattern: '[\s\S]*' # Optional. Filters found projects based on provided patter. Defaults to `[\s\S]*`, which means to not filter anything
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 30 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }

    microcksApiEntity:
      production:
        baseUrl: ${MICROCKS_URL}
        serviceAccount: ${MICROCKS_SERVICE_ACCOUNT}
        serviceAccountCredentials: ${MICROCKS_SERVICE_TOKEN}
        systemLabel: domain
        ownerLabel: team
        addLabels: true # optional; copy any other labels from Microcks in Backstage catalog - default is true
        addOpenAPIServerUrl: true # optional; add a server in OpenAPI spec to point to Microcks sandbox URL - default is false
        schedule: # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 2 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 1 }


nexusRepositoryManager:
  experimentalAnnotations: true

sonarqube:
  instances:
    - name: inetum
      baseUrl: ${SONARQUBE_URL}
      apiKey: ${SONARQUBE_TOKEN}


devTools:
  externalDependencies:
    endpoints:
      - name: 'Gitlab'
        type: 'fetch'
        target: https://${GITLAB_URL}
      - name: 'Nexus'
        type: 'fetch'
        target: ${NEXUS_URL}
      - name: 'SonarQube'
        type: 'fetch'
        target: ${SONARQUBE_URL}
      - name: 'Microcks'
        type: 'fetch'
        target: ${MICROCKS_URL}
      - name: 'Archimate'
        type: 'fetch'
        target: ${ARCHIMATE_URL}

